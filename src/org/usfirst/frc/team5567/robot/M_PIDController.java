package org.usfirst.frc.team5567.robot;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.SendableBase;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Encoder;

/**
 * @author 5567
 * @version %I%, %G%
 */
public class M_PIDController implements PIDOutput{

	//  AHRS values given by the Nav-x
	AHRS ahrs;
	//  Creates Instance for the PID Controllers for going straight and for turning
	PIDController turnController;
	PIDController straightController;

	//  Loop period for PID Controller in seconds
	double pidPeriod;

	//  Constants for turning x degrees, x = kTargetAngleDegrees
	double kPRotate;
	double kIRotate;
	double kDRotate;
	final double kFRotate = 0.00;	//  This constant isn't used in our PID controller
	double rotateToAngleRate;
	double kTargetAngleDegrees;
	double kToleranceDegrees;

	// Constants for moving straight
	double kPStraight;
	double kIStraight;
	double kDStraight;
	final double kFStraight = 0.00;	//  This constant isn't used in our PID Controller
	double testSpeed;
	double newSpeed;
	
	public M_PIDController() {
		turnController = new PIDController(kPRotate, kIRotate, kDRotate, kFRotate, ahrs, this, pidPeriod);
		straightController = new PIDController(kPStraight, kIStraight, kDStraight, kFStraight, ahrs, this, pidPeriod);
		
	}
	

	
	//  This was added due to implementing PIDOutput,
	//  but was commented put when setting PID constants.
	@Override
	/* This function is invoked periodically by the PID Controller, */
	/* based upon navX MXP yaw angle input and PID Coefficients.    */
	public void pidWrite(double output) {
		//rotateToAngleRate = output;
		
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/**  This takes the parameters and store them as the PID constants for the straight and turning PID controllers
	 * @param kPStr  The P constant for the turning PID controller
	 * @param kIStr  The I constant for the turning PID controller
	 * @param kDStr  The D constant for the turning PID controller
	 * 
	 * @param kPRot  The P constant for the straight PID controller
	 * @param kIRot  The I constant for the straight PID controller
	 * @param kDRot  The D constant for the straight PID controller
	 */
/*	M_PIDController(double kPStr, double kIStr, double kDStr, double kPRot, double kIRot, double kDRot) {

		//  Stores the PID parameters in member variables

		//  The PID constants for moving straight
		kPStraight = kPStr;
		kIStraight = kIStr;
		kDStraight = kDStr;

		//  The PID constants for turning
		kPRotate = kPRot;
		kIRotate = kIRot;
		kDRotate = kDRot;
	}

	/**  This is the PID Controller used when the robot is turning towards a specific angle passed in
	 * @param AHRS  The value generated by the Nav-x sensor, passed through to the PID controller
	 * @param angleRate  Value of how fast the robot rotates (-1 to 1, CCW to CW)
	 * @param targetAngle  Angle (in degrees) the robot will rotate to
	 * @param toleranceAngle Amount of tolerance (in degrees) the robot is allowed to be off from the target angle
	 * @param period The loop time (in seconds) for the PID controller to do calculations
	 */
/*	public void turningPID(double AHRS, double angleRate, double targetAngle, double toleranceAngle, double period) {

	}

	/**  This is the PID Controller used when the robot is going straight without turning or drifting left or right
	 * @param AHRS  The value generated by the Nav-x sensor, passed through to the PID controller
	 * @param speedStr  The speed the robot will go when moving 
	 * @param period  The loop time (in seconds) for the PID controller to do calculations
	 */
/*	public void straightPID(double AHRS, double speedStr, double period) {

	}
*/










































































}